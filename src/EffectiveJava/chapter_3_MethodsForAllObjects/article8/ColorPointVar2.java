package EffectiveJava.chapter_3_MethodsForAllObjects.article8;

import java.awt.Color;

public class ColorPointVar2 {
    private final Point point;
    private final Color color;

    public ColorPointVar2(int x, int y, Color color) {
        if(color == null)
            throw new NullPointerException();
        point = new Point(x,y);
        this.color = color;
    }
    /**
     *  Возврашает вид этой цветной точки
     */
    public Point asPoint() {
        return point;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ColorPointVar2)) return false;
        ColorPointVar2 that = (ColorPointVar2) o;

        return that.point.equals(point) && that.color.equals(color);
        // или так Auto generated by IntelliJ Idea
        //return Objects.equals(point, that.point) &&
        //        Objects.equals(color, that.color);
    }
    //... Остальное опущено

    //Рецепт создания высококачественного метода equals:
    //1) Используйте оператор == для проверки, является ли аргумент ссылкой на указанный объект.
    //Если это так возвращайте true
    //Это чисто способ повысить производительность программы
    //2) Используйте оператор instanceof для провекри имеет ли аргумент правильный тип
    //Если это не так то возвращаем false
    //3) Приводите аргумент к правильному типу
    //(После instance of это 100% сработает)
    //4) Пройдитесь по всем "значимым" полям класса и убедитесь в том, что значение такого поля
    //в аргументе и значение того же поля в объекте соответствуют друг-другу.
    //если проверки для всех полей прошли успешно - вернуть true иначе возвращаем false
    //-4.1) для простых полей используем == , для полей ссылочного типа рекурсивно вызываем equals
    //-4.2) для float использовать Float.compare для double Double.compare
    //(дело в том что существуют Float.NaN, -0.0f)
    //-(4.3) Для массивов Array.equals
    //5) Закончив написангие собственного метода equals, Задайте себе 3 вопроса:
    //-(5.1)    Являетсяли он Симетричным?
    //-(5.2)    Являетсяли он Транзитивным?
    //-(5.3)    Являетсяли он Непротиворечивым? + (Рефлексивность и отличие от null)
    //6) Переопределяя equals переопределяйте hashCode

}
